open Tree_types


(* result is child_lis, but with elements in child_lis and parent_lis
 * removed, order in maintained *)
let uniq_join parent_lis child_lis = 
  let fil a = not (List.mem a parent_lis)
  in
    List.filter fil child_lis

(* generate virtual memory table for class "cls" *)
let generate_vmt a b =
  let rec maker classes_ht cls cur =
    match Hashtbl.find classes_ht cur with
    | parent,_,_,_,l_meth ->
      match parent with 
      | "" -> l_meth 
      | p -> 
        let so_far = maker classes_ht cls p in
          so_far@(uniq_join so_far l_meth)  
  in 
    maker a b b 

(* generate list of virtual memory tables *)
let vmts_maker classes_ht l_class = 
  List.map (generate_vmt classes_ht) l_class




(* format of output generated by goal node:
    mc,classes_hashtable

    where classes_hashtable has key=name of class, value=parent,var_ht,meth_ht

    var_ht has key=identifier, val=type

    meth_ht has key=meth_name, val=return type,formal parameters,local_var_ht
*)

